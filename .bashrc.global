# If you wish use zsh and don't have root access. Then add the following lines in bashrc
#
# if type "zsh" > /dev/null; then
#     exec zsh
# else
#     [ -f $HOME/.bashrc.global ] && source $HOME/.bashrc.global
#     [ -f $HOME/.bashrc.local ] && source $HOME/.bashrc.local
#     [ -f ~/.fzf.bash ] && source ~/.fzf.bash
# fi

# Common functions {{{ #
weather() {
    # See help here: http://wttr.in/:help
    cmd="wttr.in/nizhny_novgorod?m&M"
    if [ -n "$1" ]; then
        cmd="wttr.in/$1?m&M"
    fi
    curl "${cmd}"
}

weather_today() {
    cmd="wttr.in/nizhny_novgorod?m&M&0"
    if [ -n "$1" ]; then
        cmd="wttr.in/$1?m&M&0"
    fi
    curl "${cmd}"
}

weather_today_timeout() {
    cmd="wttr.in/nizhny_novgorod?m&M&0"
    t=3
    if [ -n "$1" ]; then
        t=$1
    fi
    timeout $t curl "${cmd}"
}

# Taken from here: https://unix.stackexchange.com/questions/285924/how-to-compare-a-programs-version-in-a-shell-script
version_ge()
{
    printf '%s\n%s\n' "$2" "$1" | sort --check=quiet --version-sort
}

vimgdb() {
    args=""
    for arg in $@; do
        args=$args""$arg" "
    done
    cmd="vim -c \"ConqueGdb -d $(pwd) --args $args\" -c \"only\" ."
    eval $cmd
}

vimlldb() {
    args=""
    val=0
    for arg in $@; do
        if [ "${val}" == "0" ]; then
            args=$args""$arg" -- "
            val=1
        else
            args=$args""$arg" "
        fi
    done
    cmd="vim -c \"GdbStartLLDB lldb $args\" -c \"only\" ."
    eval $cmd
}

isAndroidOS() {
    if [[ `uname` != 'Darwin' ]]; then
        if [[ `uname -o` == 'Android' ]]; then
            true
        else
            false
        fi
    else
        false
    fi
}

isMacOS() {
    if [[ `uname` != 'Darwin' ]]; then
        false
    else
        true
    fi
}

# go to the git root directory
cdgit() {
    cd $(git rev-parse --show-toplevel)
}

# cp with status bar
cpv()
{
    rsync -pogh --partial --inplace --append --progress -- "$@"
}

# create directory and go to it
mkcd() {
    mkdir -p "$1"
    cd "$1"
}

rmtail() {
    if [ -f "$1" ]; then
        echo "File exists. Should I remove it? (y/n): "
        rm_file=0
        read yn
        case $yn in
            [Yy]* ) rm_file=1;;
            [Nn]* ) rm_file=0;;
            * ) echo "Please answer y or n or press Ctrl+C for interrupt."; return 1;;
        esac
        if [ $rm_file -eq 1 ]; then
            rm -f $1
        fi
    fi

    while [ ! -f "$1" ]
    do
        sleep 1
    done

    tail -f $1
}

# creates tmux sessing with mutt
function email() {
    if ! tmux has-session -t email 2> /dev/null; then
        # Make saved attachments go to ~/Downloads by default.
        tmux new-session -d -s email -c ~/Downloads -n mutt
        tmux send-keys -t email:mutt mutt Enter
        tmux new-window -t email -c ~/.mutt -n sync
        tmux send-keys -t email:sync ~/.mutt/scripts/sync.sh Enter
        #tmux split-window -t email:sync -v -f -l 8 -c ~/.mutt
        #tmux send-keys -t email:sync.bottom '~/.mutt/scripts/control.sh' Enter
    fi
    if [ -z "$TMUX" ]; then
        tmux attach -t email:mutt
    else
        tmux switch-client -t email:mutt
    fi
}

function free_del_space() {
    kill -9 `lsof | grep '(deleted)' | awk '{print $2}'`
}

function duhd() {
    du -h -d 1
}
# }}} Common functions #
# Aliases {{{ #
if ! isMacOS; then
    alias ls='ls --color=always'
else
    alias ls='ls -G'
fi
if isAndroidOS; then
    alias grep='grep'
else
    alias grep='grep --color'
fi
# }}} Aliases #
# Setup environment {{{ #
export LANGUAGE=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export LC_TYPE=en_US.UTF-8
export FZF_TMUX_VERSION="3.3"

export EDITOR=${EDITOR:-vim}
export VISUAL=$EDITOR
export GIT_EDITOR=$EDITOR
export SVN_EDITOR=vim

export TERM=xterm-256color

export XDG_CONFIG_HOME="$HOME/.config"
export ZSH_COMPL_DIR="$HOME/.zsh/completion"
LOCAL_BIN=${HOME}/.bin/
mkdir -p $LOCAL_BIN
mkdir -p $XDG_CONFIG_HOME
mkdir -p $ZSH_COMPL_DIR
export PATH=$HOME/.local/bin:$PATH
export PATH=$LOCAL_BIN:$PATH

# Install function {{{ #
function install_tool() {
    github_repo=$1
    tool_name=$2
    tool_version=$3
    full_name=${4:-$tool_name}
    TOOL_BIN=$LOCAL_BIN/$tool_name
    # TODO: Rewrite next lines maybe with `gh release view` and python
    LINUX_ENDING=${5:-'x86_64-unknown-linux-musl'}
    MACOS_ENDING=${6:-'x86_64-apple-darwin'}
    tool_version_archive=${7:-$tool_version}
    if [ ! -f $TOOL_BIN ]; then
        if [[ `uname` != 'Darwin' ]]; then
            export archive_name=$full_name'-'$tool_version_archive'-'$LINUX_ENDING
        else
            export archive_name=$full_name'-'$tool_version_archive'-'$MACOS_ENDING
        fi
        tmp_dir='/tmp/'
        if isAndroidOS; then
            tmp_dir='~/tmp/'
            mkdir -p $tmp_dir
        fi
        wget -O $tmp_dir/$archive_name.tar.gz $github_repo/releases/download/$tool_version/$archive_name.tar.gz
        tar xf $tmp_dir/$archive_name.tar.gz -C $tmp_dir
        if [ ! -f $tmp_dir/$archive_name/$tool_name ]; then
            echo "$tmp_dir/$tool_name"
            cp -f $tmp_dir/$tool_name $TOOL_BIN
        else
            echo "$tmp_dir/$archive_name"
            cp -f $tmp_dir/$archive_name/$tool_name $TOOL_BIN
        fi
    fi
}
# }}} Install function #
# Install bat {{{ #
TOOL_BIN=$LOCAL_BIN/bat
if [ ! -f $TOOL_BIN ]; then
    echo "Installing bat"
    install_tool 'https://github.com/sharkdp/bat' 'bat' 'v0.24.0'
fi
# }}} Install bat #
# Install ripgrep {{{ #
TOOL_BIN=$LOCAL_BIN/rg
if [ ! -f $TOOL_BIN ]; then
    echo "Installing ripgrep"
    res=$(install_tool 'https://github.com/BurntSushi/ripgrep' 'rg' '13.0.0' 'ripgrep')
    # Enable autocompletion
    cp -f $res/complete/_rg $ZSH_COMPL_DIR
fi
# }}} Install ripgrep #
# Install fd {{{ #
TOOL_BIN=$LOCAL_BIN/fd
if [ ! -f $TOOL_BIN ]; then
    echo "Installing fd"
    res=$(install_tool 'https://github.com/sharkdp/fd' 'fd' 'v8.7.0')
    # Enable autocompletion
    cp -f $res/autocomplete/_fd $ZSH_COMPL_DIR
fi
# }}} Install fd #
# Install fzf {{{ #
TOOL_BIN=$LOCAL_BIN/fzf
if [ ! -f $TOOL_BIN ]; then
    echo "Installing fzf"
    res=$(install_tool 'https://github.com/junegunn/fzf' 'fzf' 'v0.55.0' 'fzf' 'linux_amd64' 'darwin_amd64' '0.55.0')
fi
# }}} Install fzf #
# Instal Tmux Plugin Manager {{{ #
export TPM_DIR=$HOME/.tmux/plugins/tpm
if [ ! -d $TPM_DIR ]; then
    git clone https://github.com/tmux-plugins/tpm $TPM_DIR
fi
# }}} Instal Tmux Plugin Manager #
# Install translate-shell {{{ #
export TRANS_BIN=$LOCAL_BIN/trans
if [ ! -f $TRANS_BIN ]; then
    wget -O $TRANS_BIN git.io/trans
    chmod +x $TRANS_BIN
fi
# }}} Install translate-shell #
# }}} Setup environment #
# FZF configurations {{{ #

# FZF search program. Get config from here: https://medium.com/@crashybang/supercharge-vim-with-fzf-and-ripgrep-d4661fc853d2
# --files: List files that would be searched but do not search
# --no-ignore: Do not respect .gitignore, etc...
# --hidden: Search hidden files and folders
# --follow: Follow symlinks
# --glob: Additional conditions for search (in this case ignore everything in the .git/ folder)
export FZF_DEFAULT_COMMAND='fd --type file --hidden --follow --no-ignore --exclude .git'
export FZF_DEFAULT_OPTS='--height 30% --border'

##########################################################################
### FZF CONFIGS
##########################################################################
# fe [FUZZY PATTERN] - Open the selected file with the default editor
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
fe() {
  local files
  tmux_v=$(tmux -V | sed 's/^tmux //')
  if version_ge $tmux_v $FZF_TMUX_VERSION; then
    IFS=$'\n' files=($(fzf --tmux bottom --preview '[[ $(file --mime {}) =~ binary ]] && \
                   echo {} is a binary file || \
                   (highlight -O ansi -l {} || \
                    coderay {} || \
                    rougify {} || \
                    cat {}) 2> /dev/null | head -500' --query="$1" --multi --select-1 --exit-0))
  else
    IFS=$'\n' files=($(fzf-tmux --preview '[[ $(file --mime {}) =~ binary ]] && \
                   echo {} is a binary file || \
                   (highlight -O ansi -l {} || \
                    coderay {} || \
                    rougify {} || \
                    cat {}) 2> /dev/null | head -500' --query="$1" --multi --select-1 --exit-0))
  fi
  [[ -n "$files" ]] && ${EDITOR:-vim} "${files[@]}"
}

# frm [FUZZY PATTERN] - Remove the selected file
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
frm() {
  local files
  tmux_v=$(tmux -V | sed 's/^tmux //')
  if version_ge $tmux_v $FZF_TMUX_VERSION; then
    IFS=$'\n' files=($(fzf --tmux bottom --preview '[[ $(file --mime {}) =~ binary ]] && \
                   echo {} is a binary file || \
                   (highlight -O ansi -l {} || \
                    coderay {} || \
                    rougify {} || \
                    cat {}) 2> /dev/null | head -500' --query="$1" --multi --select-1 --exit-0))
  else
    IFS=$'\n' files=($(fzf-tmux --preview '[[ $(file --mime {}) =~ binary ]] && \
                   echo {} is a binary file || \
                   (highlight -O ansi -l {} || \
                    coderay {} || \
                    rougify {} || \
                    cat {}) 2> /dev/null | head -500' --query="$1" --multi --select-1 --exit-0))
  fi
  [[ -n "$files" ]] && rm -i "${files[@]}"
}

# fcd - including hidden directories
fcd() {
  local dir
  local file
  file=$(locate $(pwd) | fzf -e -q "$*")
  if [ ! -d "$file" ]; then
    file=$(dirname "$file")
  fi
  cd "$file"
}

# fcdh - cd from home
fcdh() {
  local dir
  local file
  file=$(locate ~ | fzf -e -q "$*")
  if [ ! -d "$file" ]; then
    file=$(dirname "$file")
  fi
  cd "$file"
}

# fcdr - cd to directory from root
fcdr() {
  local dir
  local file
  file=$(locate / | fzf -e -q "$*")
  if [ ! -d "$file" ]; then
    file=$(dirname "$file")
  fi
  cd "$file"
}

# fk - kill process
fk() {
  local pid
  pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')

  if [ "x$pid" != "x" ]
  then
    echo $pid | xargs kill -${1:-9}
  fi
}

# Check if you in git repository
is_in_git_repo() {
  git rev-parse HEAD > /dev/null 2>&1
}

# Show current git status with diff
gdiff() {
  is_in_git_repo || return
  git -c color.status=always status --short |
  fzf -m --ansi --nth 2..,.. \
    --preview '(git diff --color=always -- {-1} | sed 1,4d; cat {-1}) | head -500' |
  cut -c4- | sed 's/.* -> //'
}

# gcol - checkout git branch (locals)
gcol() {
  is_in_git_repo || return
  local branches branch
  branches=$(git branch -vv) &&
  branch=$(echo "$branches" | grep -v '/HEAD\s' | fzf +m --ansi --multi --tac --preview-window right:50% \
    --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1) | head -'$LINES |
  sed 's/^..//' | cut -d' ' -f1 |
  sed 's#^remotes/##') &&
  git checkout $(echo "$branch" | awk '{print $1}' | sed "s/.* //")
}

# gcor - checkout git branch (including remote branches)
gcor() {
  is_in_git_repo || return
  local branches branch
  branches=$(git branch --all | grep -v HEAD) &&
  tmux_v=$(tmux -V | sed 's/^tmux //')
  if version_ge $tmux_v $FZF_TMUX_VERSION; then
    branch=$(echo "$branches" |
             fzf --tmux bottom -d $(( 2 + $(wc -l <<< "$branches") )) +m --ansi --multi --tac --preview-window right:50% \
      --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1) | head -'$LINES |
    sed 's/^..//' | cut -d' ' -f1 |
    sed 's#^remotes/##') || return
  else
    branch=$(echo "$branches" |
             fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m --ansi --multi --tac --preview-window right:50% \
      --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1) | head -'$LINES |
    sed 's/^..//' | cut -d' ' -f1 |
    sed 's#^remotes/##') || return
  fi
  git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

# gcort - checkout remote git branch with track option (including remote branches)
gcort() {
  is_in_git_repo || return
  local branches branch
  branches=$(git branch --all | grep -v HEAD) &&
  tmux_v=$(tmux -V | sed 's/^tmux //')
  if version_ge $tmux_v $FZF_TMUX_VERSION; then
    branch=$(echo "$branches" |
             fzf --tmux bottom -d $(( 2 + $(wc -l <<< "$branches") )) +m --ansi --multi --tac --preview-window right:50% \
      --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1) | head -'$LINES |
    sed 's/^..//' | cut -d' ' -f1 |
    sed 's#^remotes/##') || return
  else
    branch=$(echo "$branches" |
             fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m --ansi --multi --tac --preview-window right:50% \
      --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1) | head -'$LINES |
    sed 's/^..//' | cut -d' ' -f1 |
    sed 's#^remotes/##') || return
  fi
  git checkout --track $(echo "$branch" | sed "s/.* //")
}

# gcsc - checkout current branch to specific commit
gcsc() {
  is_in_git_repo || return
  local commits commit
  secret_char="~~GRTC_BACKSLASH~~"
  commits=$(git log --pretty='%C(yellow)%h %C(cyan)%cd %Cblue%aN%C(auto)%d %Creset%s' --graph --date=human | sed -e "s/\//${secret_char}/g" -e "s/\\\\/\//g" -e "s/${secret_char}/\\\\/g")
  commit=$(echo "$commits" | fzf --query="$1" --select-1 --exit-0 | sed -e "s/^[ *\|/]*//g" | cut -d" " -f1)
  git checkout $commit
}

# grtc - hard reset git repository to specific commit
grtc() {
  is_in_git_repo || return
  local commits commit
  secret_char="~~GRTC_BACKSLASH~~"
  commits=$(git log --pretty='%C(yellow)%h %C(cyan)%cd %Cblue%aN%C(auto)%d %Creset%s' --graph --date=human | sed -e "s/\//${secret_char}/g" -e "s/\\\\/\//g" -e "s/${secret_char}/\\\\/g")
  commit=$(echo "$commits" | fzf --query="$1" --select-1 --exit-0 | sed -e "s/^[ *\|/]*//g" | cut -d" " -f1)
  git reset --hard $commit
}

# gcot - checkout git branch/tag
gcot() {
  is_in_git_repo || return
  local tags branches target
  tags=$(git tag --sort -version:refname) || return
  branches=$(
    git branch --all | grep -v HEAD             |
    sed "s/.* //"    | sed "s#remotes/[^/]*/##" |
    sort -u          | awk '{print "\x1b[34;1mbranch\x1b[m\t" $1}') || return
  tmux_v=$(tmux -V | sed 's/^tmux //')
  if version_ge $tmux_v $FZF_TMUX_VERSION; then
    target=$(
      (echo "$tags"; echo "$branches") |
      fzf --tmux bottom -- --no-hscroll --ansi +m --multi --preview-window right:70% \
      --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" {} | head -'$LINES -d "\t" -n 2) || return
  else
    target=$(
      (echo "$tags"; echo "$branches") |
      fzf-tmux -- --no-hscroll --ansi +m --multi --preview-window right:70% \
      --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" {} | head -'$LINES -d "\t" -n 2) || return
  fi
  git checkout $(echo "$target" | awk '{print $2}')
}

# gcoc - checkout git commit
gcoc() {
  is_in_git_repo || return
  local commits commit
  commits=$(git log --pretty=oneline --abbrev-commit --reverse) &&
  commit=$(echo "$commits" | fzf --tac +s +m -e --multi --preview-window right:50% \
    --preview 'git show --color=always $(sed "s/ .*//" <<< {}) | head -'$LINES) &&
  git checkout $(echo "$commit" | sed "s/ .*//")
}

# gdlb - delete local branch
gdlb() {
  is_in_git_repo || return
  local branches branch
  branches=$(git branch -vv) &&
  branch=$(echo "$branches" | fzf +m --ansi --multi --tac --preview-window right:50% \
    --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1) | head -'$LINES |
  sed 's/^..//' | cut -d' ' -f1 |
  sed 's#^remotes/##') &&
  git branch -D $(echo "$branch" | awk '{print $1}' | sed "s/.* //")
}

# gdrb - delete remote branch
gdrb() {
  is_in_git_repo || return
  local branches branch remote_name branch_name
  remote_name=""
  branches=$(git branch --remotes | grep -v HEAD) &&
  tmux_v=$(tmux -V | sed 's/^tmux //')
  if version_ge $tmux_v $FZF_TMUX_VERSION; then
    branch=$(echo "$branches" |
             fzf --tmux bottom -d $(( 2 + $(wc -l <<< "$branches") )) +m --ansi --multi --tac --preview-window right:50% \
             --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1) | head -'$LINES |
             sed 's/^..//' | cut -d' ' -f1 |
             sed 's#^remotes/##') || return
  else
    branch=$(echo "$branches" |
             fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m --ansi --multi --tac --preview-window right:50% \
             --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1) | head -'$LINES |
             sed 's/^..//' | cut -d' ' -f1 |
             sed 's#^remotes/##') || return
  fi
  IFS='/' read remote_name branch_name <<< "$branch"
  echo "git push ${remote_name} --delete ${branch_name}"
  git push ${remote_name} --delete ${branch_name}
}

# gshow - git commit browser
gshow() {
  is_in_git_repo || return
  git log --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
      --bind "ctrl-m:execute:
                (grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
                {}
FZF-EOF" \
    --preview 'grep -o "[a-f0-9]\{7,\}" <<< {} | xargs git show --color=always | head -'$LINES
}

# tm - connect to tmux session
tm() {
  local session
  session=$(tmux list-sessions -F "#{session_name}" | \
    fzf --query="$1" --select-1 --exit-0) &&
    tmux attach-session -t "$session" || echo "No tmux sessions"
}

# tk - kill tmux session
tk() {
  local session
  session=$(tmux list-sessions -F "#{session_name}" | \
    fzf --query="$1" --exit-0) &&
    tmux kill-session -t "$session" || echo "No tmux sessions"
}

# gitvl - Show local branch in gitv
gitvl() {
  is_in_git_repo || return
  local branches branch
  branches=$(git branch -vv) &&
  branch=$(echo "$branches" | grep -v '/HEAD\s' | fzf +m --ansi --multi --tac --preview-window right:50% \
    --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1) | head -'$LINES |
  sed 's/^..//' | cut -d' ' -f1 |
  sed 's#^remotes/##') &&
  vim "$(git rev-parse --show-toplevel)"/.git/index -c "Gitv "$(echo "$branch" | awk '{print $1}' | sed "s/.* //") -c "tabonly"
}

# gitvr - Show remote branch in gitv
gitvr() {
  is_in_git_repo || return
  local branches branch
  branches=$(git branch --all | grep -v HEAD) &&
  tmux_v=$(tmux -V | sed 's/^tmux //')
  if version_ge $tmux_v $FZF_TMUX_VERSION; then
    branch=$(echo "$branches" |
             fzf --tmux bottom -d $(( 2 + $(wc -l <<< "$branches") )) +m --ansi --multi --tac --preview-window right:50% \
      --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1) | head -'$LINES |
    sed 's/^..//' | cut -d' ' -f1 |
    sed 's#^remotes/##') || return
  else
    branch=$(echo "$branches" |
             fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m --ansi --multi --tac --preview-window right:50% \
      --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1) | head -'$LINES |
    sed 's/^..//' | cut -d' ' -f1 |
    sed 's#^remotes/##') || return
  fi
  vim "$(git rev-parse --show-toplevel)"/.git/index -c "Gitv "$(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##") -c "tabonly"
}

# cce - change conda environment
cce() {
    if ! command -v conda &> /dev/null
    then
        return
    fi

    local conda_env
    conda_env=$(conda info --envs | sed '/^#/d' | \
        fzf --query="$1" --select-1 --exit-0)
    conda deactivate
    conda activate $(echo $conda_env | awk '{print $1}')
}

# dce - delete conda environment
dce() {
    if ! command -v conda &> /dev/null
    then
        return
    fi

    current_name=${CONDA_PREFIX##*/}

    local conda_env
    conda_env=$(conda info --envs | sed '/^#/d' | \
        fzf --query="$1" --select-1 --exit-0)
    selected_name=$(echo $conda_env | awk '{print $1}')
    if [ "$current_name" = "$selected_name" ]; then
        conda deactivate
    fi

    conda remove --name $selected_name --all
}

# ghco - GitHub checkout specific branch
ghco() {
  local jq_template pr_number

  jq_template='"'\
'#\(.number) - \(.title)'\
'\t'\
'Author: \(.user.login)\n'\
'Created: \(.created_at)\n'\
'Updated: \(.updated_at)\n\n'\
'\(.body)'\
'"'

  pr_number=$(
    gh api 'repos/:owner/:repo/pulls' |
    jq ".[] | $jq_template" |
    sed -e 's/"\(.*\)"/\1/' -e 's/\\t/\t/' |
    fzf \
      --select-1 \
      --exit-0 \
      --with-nth=1 \
      --delimiter='\t' \
      --preview='echo -e {2}' \
      --preview-window=top:wrap |
    cut -f1 |
    sed 's/^#\([0-9]*\).*/\1/'
  )

  if [ -n "$pr_number" ]; then
    gh pr checkout "$pr_number"
  else
    echo "No PRs found"
  fi
}
# }}} FZF configurations #
# Autorun {{{ #
#if type "screenfetch" > /dev/null ; then
#    screenfetch -E # -E option will suppress errors
#fi
if [ -n "$BASH_VERSION" ] || [ -n "$ZSH_VERSION" ]; then
    weather_today_timeout
fi
# }}} Autorun #
# Bash Prompt {{{ #
if [ -n "$BASH_VERSION" ]; then
    # get current branch in git repo
    function parse_git_branch() {
        BRANCH=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
        if [ ! "${BRANCH}" == "" ]
        then
            STAT=`parse_git_dirty`
            echo "(${BRANCH}${STAT})"
        else
            echo ""
        fi
    }

    # get current status of git repo
    function parse_git_dirty {
        status=`git status 2>&1 | tee`
        dirty=`echo -n "${status}" 2> /dev/null | grep "modified:" &> /dev/null; echo "$?"`
        untracked=`echo -n "${status}" 2> /dev/null | grep "Untracked files" &> /dev/null; echo "$?"`
        ahead=`echo -n "${status}" 2> /dev/null | grep "Your branch is ahead of" &> /dev/null; echo "$?"`
        newfile=`echo -n "${status}" 2> /dev/null | grep "new file:" &> /dev/null; echo "$?"`
        renamed=`echo -n "${status}" 2> /dev/null | grep "renamed:" &> /dev/null; echo "$?"`
        deleted=`echo -n "${status}" 2> /dev/null | grep "deleted:" &> /dev/null; echo "$?"`
        bits=''
        if [ "${renamed}" == "0" ]; then
            bits=">${bits}"
        fi
        if [ "${ahead}" == "0" ]; then
            bits="*${bits}"
        fi
        if [ "${newfile}" == "0" ]; then
            bits="+${bits}"
        fi
        if [ "${untracked}" == "0" ]; then
            bits="?${bits}"
        fi
        if [ "${deleted}" == "0" ]; then
            bits="x${bits}"
        fi
        if [ "${dirty}" == "0" ]; then
            bits="!${bits}"
        fi
        if [ ! "${bits}" == "" ]; then
            echo " ${bits}"
        else
            echo ""
        fi
    }

    PS1="\[\033[01;37m\]\$? \$(if [[ \$? == 0 ]]; then echo \"\[\033[01;32m\]✓\"; else echo \"\[\033[01;31m\]✗\"; fi) $(if [[ ${EUID} == 0 ]]; then echo '\[\033[01;31m\]\h'; else echo '\[\033[01;32m\]\u@\h'; fi)\[\033[01;34m\]:\W \`parse_git_branch\`\$\[\033[00m\] "

    shopt -s autocd
    shopt -s cdspell
fi
# }}} Bash Prompt #
# Colors to man {{{ #
export MANROFFOPT='-c'
export LESS_TERMCAP_mb=$(tput bold; tput setaf 5)
export LESS_TERMCAP_md=$(tput bold; tput setaf 1)
export LESS_TERMCAP_me=$(tput sgr0)
export LESS_TERMCAP_so=$(tput setaf 0; tput setab 15)
export LESS_TERMCAP_se=$(tput rmso; tput sgr0)
export LESS_TERMCAP_us=$(tput smul; tput bold; tput setaf 2)
export LESS_TERMCAP_ue=$(tput rmul; tput sgr0)
export LESS_TERMCAP_mr=$(tput rev)
export LESS_TERMCAP_mh=$(tput dim)
# }}} Colors to man #
# Ulimit {{{ #
# Enable core dump\
ulimit -c unlimited
# }}} Ulimit #
#  PDF compress {{{ # 
pdfcompress ()
{
   gs -q -dNOPAUSE -dBATCH -dSAFER -sDEVICE=pdfwrite -dCompatibilityLevel=1.5 -dPDFSETTINGS=/screen -dEmbedAllFonts=true -dSubsetFonts=true -dPrinted=false -dColorImageDownsampleType=/Bicubic -dColorImageResolution=720 -dGrayImageDownsampleType=/Bicubic -dGrayImageResolution=720 -dMonoImageDownsampleType=/Bicubic -dMonoImageResolution=720 -sOutputFile=$1.compressed.pdf $1; 
}
#  }}} PDF compress # 
#  Install NVM {{{ #
install_nvm ()
{
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash

    source ~/.config/nvm/nvm.sh

    nvm install v20.18.0
}

export NVM_DIR="$HOME/.config/nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
#  }}} Install NVM #
